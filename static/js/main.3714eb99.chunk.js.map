{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","getData","a","fetch","response","json","map","item","key","provincestate","countryregion","useEffect","state","lat","lng","zoom","console","log","Map","center","TileLayer","url","attribution","Marker","position","location","Popup","confirmed","deaths","recovered","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAOe,SAASA,IAAO,IAAD,EAEJC,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAItBC,EAAO,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,4EADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,QAERN,EAFQ,QAGTO,KAAI,SAACC,GACRA,EAAKC,IAAOD,EAAKE,cAAgBF,EAAKG,cAAgB,IAAMH,EAAKE,cAAgBF,EAAKG,iBAExFV,EAAQD,GANM,2CAAH,qDASbY,qBAAU,WACHZ,GACDE,MAEH,IAEH,IAAMW,EAAQ,CACZC,KAAM,MACNC,KAAM,MACNC,KAAM,GAGR,OAAKhB,GAGHiB,QAAQC,IAAIlB,GAEV,kBAACmB,EAAA,EAAD,CAAKC,OAAQP,EAAOG,KAAMH,EAAMG,MAC9B,kBAACK,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbvB,EAAKO,KAAI,SAAAC,GAAI,OACZ,kBAACgB,EAAA,EAAD,CACEf,IAAKD,EAAKC,IACVgB,SAAU,CACRjB,EAAKkB,SAASZ,IACdN,EAAKkB,SAASX,MAGhB,kBAACY,EAAA,EAAD,KACE,6BACE,+BAAI,gCAASnB,EAAKC,KAAlB,KACA,4CAAkBD,EAAKoB,UAAvB,KACA,wCAAcpB,EAAKqB,OAAnB,KACA,4CAAkBrB,EAAKsB,UAAvB,aAtBJ,6DCrBQC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.3714eb99.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\n\nexport default function App() {\n\n  const [data, setData] = useState('');\n\n  const getData = async () => {\n    const response = await fetch('https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest')\n    const data = await response.json()\n    data.map((item) => {\n      item.key = (item.provincestate)? item.countryregion + \"-\" + item.provincestate : item.countryregion;\n    })\n    setData(data)\n  }\n\n  useEffect(() => {\n    if (!data) {\n        getData();\n    }\n  }, []);\n\n  const state = {\n    lat: -38.41,\n    lng: -63.61,\n    zoom: 4,\n  }\n\n  if (!data) {\n    return (<div>Inicializando componentes...</div>);\n  } else {\n    console.log(data);\n    return (\n      <Map center={state} zoom={state.zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {data.map(item => (\n          <Marker\n            key={item.key}\n            position={[\n              item.location.lat,\n              item.location.lng\n            ]}\n          >\n            <Popup>\n              <div>\n                <p> <strong>{item.key}</strong> </p>\n                <p> confirmados: {item.confirmed} </p>\n                <p> muertes: {item.deaths} </p>\n                <p> recuperados: {item.recovered} </p>\n              </div>\n            </Popup>\n          </Marker>\n            ))\n        }\n      </Map>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}