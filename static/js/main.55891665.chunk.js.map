{"version":3,"sources":["Header.js","Trend.js","Sidebar.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","Trend","useState","data","setData","getData","a","fetch","response","json","dataArray","formattedData","firstItemTimeseries","timeseries","keys","Object","confirmed","deaths","recovered","firstMarch","Date","map","key","dateItem","push","date","type","quantity","console","log","items","useEffect","VegaLite","spec","width","height","mark","tooltip","encoding","x","field","title","y","color","name","actions","Sidebar","responseBrief","dataBrief","responseAr","dataAr","brief","argBrief","MapContainer","props","state","lat","lng","zoom","Map","center","TileLayer","url","attribution","countriesinfo","item","Marker","position","location","Popup","App","countryregion","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAEe,SAASA,IAEpB,OACE,yBAAKC,UAAU,uCAAuCC,MAAO,CAAC,kBAAmB,WAC/E,yBAAKD,UAAU,mCACb,wBAAIA,UAAU,4BAAd,wC,YCHK,SAASE,IAEpB,IAF4B,EAIJC,mBAAS,IAJL,mBAIrBC,EAJqB,KAIfC,EAJe,KAMtBC,EAAO,uCAAG,4CAAAC,EAAA,sEACSC,MALb,wFAII,cACRC,EADQ,gBAEUA,EAASC,OAFnB,OAERC,EAFQ,OAGRC,EAAgB,GAChBC,EAAsBF,EAAU,GAAGG,WACnCC,EAAOC,OAAOD,KAAKF,GACrBI,EAAY,EAAGC,EAAS,EAAGC,EAAY,EACrCC,EAAa,IAAIC,KAAK,KAAM,EAAG,GACrCN,EAAKO,KAAI,SAAAC,GACP,IAAMC,EAAW,IAAIH,KAAKE,GACtBC,GAAYJ,IACZH,EAAYJ,EAAoBU,GAAKN,UAAYA,EACjDL,EAAca,KAAK,CACfC,KAAMF,EACNG,KAAM,cACNC,SAAUX,IAEdC,EAASL,EAAoBU,GAAKL,OAASA,EAC3CN,EAAca,KAAK,CACfC,KAAMF,EACNG,KAAM,UACNC,SAAUV,IAEdC,EAAYN,EAAoBU,GAAKJ,UAAYA,EACjDP,EAAca,KAAK,CACfC,KAAMF,EACNG,KAAM,cACNC,SAAUT,QAIpBU,QAAQC,IAAIlB,GACZP,EAAQ,CAAC0B,MAAOnB,IAhCF,4CAAH,qDAmCboB,qBAAU,WACH5B,GACDE,MAEH,IAkBH,OAAKF,EAID,6BACI,sDACA,kBAAC6B,EAAA,EAAD,CAAUC,KAtBL,CACTC,MAAO,IACPC,OAAQ,IACRC,KAAM,CACFV,KAAM,OACNW,SAAS,GAEbC,SAAU,CACRC,EAAG,CAAEC,MAAO,OAAQd,KAAM,WAAYe,MAAO,SAC7CC,EAAG,CAAEF,MAAO,WAAYd,KAAM,eAAgBe,MAAO,YACrDE,MAAO,CAACH,MAAO,OAAQd,KAAM,YAE/BvB,KAAM,CAAEyC,KAAM,SACdC,SAAS,GASiB1C,KAAMA,KALxB,+DChED,SAAS2C,IACpB,IAD+B,EAIP5C,mBAAS,IAJF,mBAIxBC,EAJwB,KAIlBC,EAJkB,KAMzBC,EAAO,uCAAG,oCAAAC,EAAA,sEACcC,MANb,2EAKD,cACRwC,EADQ,gBAEUA,EAActC,OAFxB,cAERuC,EAFQ,gBAGWzC,MAPP,oFAIJ,cAGR0C,EAHQ,iBAIOA,EAAWxC,OAJlB,QAIRyC,EAJQ,OAKdtB,QAAQC,IAAIqB,GACN1C,EAAW,CACb2C,MAAOH,EACPI,SAAUF,EAAO,IAErB9C,EAAQI,GAVM,4CAAH,qDAmBb,OANAuB,qBAAU,WACH5B,GACDE,MAEH,IAEEF,EAKD,6BACI,+CACA,4BACI,kDAAuB,0BAAMJ,UAAU,gBAAgBI,EAAKgD,MAAMjC,YAClE,kDAAuB,0BAAMnB,UAAU,kBAAkBI,EAAKgD,MAAMnC,YACpE,wCAAa,0BAAMjB,UAAU,eAAeI,EAAKgD,MAAMlC,UAE3D,yCACA,4BACI,kDAAuB,0BAAMlB,UAAU,gBAAgBI,EAAKiD,SAASlC,YACrE,kDAAuB,0BAAMnB,UAAU,kBAAkBI,EAAKiD,SAASpC,YACvE,wCAAa,0BAAMjB,UAAU,eAAeI,EAAKiD,SAASnC,UAE9D,kBAAChB,EAAD,OAjBI,kD,yCC1BD,SAASoD,EAAcC,GAClC,IAAMC,EAAQ,CACVC,KAAM,MACNC,KAAM,MACNC,KAAM,GAEV,OAAKJ,EAKD,yBAAKvD,UAAU,aACX,kBAAC4D,EAAA,EAAD,CAAKC,OAAQL,EAAOG,KAAMH,EAAMG,MAChC,kBAACG,EAAA,EAAD,CACIC,IAAI,qDACAC,YAAY,2EAEnBT,EAAMU,cAAc3C,KAAI,SAAA4C,GAAI,OACzB,kBAACC,EAAA,EAAD,CACI5C,IAAK2C,EAAK3C,IACV6C,SAAU,CACNF,EAAKG,SAASZ,IACdS,EAAKG,SAASX,MAGlB,kBAACY,EAAA,EAAD,KACI,6BACA,+BAAI,gCAASJ,EAAK3C,KAAlB,KACA,uBAAGvB,UAAU,gBAAb,iBAA2CkE,EAAK/C,UAAhD,KACA,uBAAGnB,UAAU,kBAAb,iBAA6CkE,EAAKjD,UAAlD,KACA,uBAAGjB,UAAU,eAAb,aAAsCkE,EAAKhD,OAA3C,aAvBR,KCHD,SAASqD,IAAO,IAAD,EAEJpE,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAItBC,EAAO,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,+FADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,QAERN,EAFQ,QAGTkB,KAAI,SAAC4C,GACRA,EAAK3C,IAAM2C,EAAKM,iBAElBnE,EAAQD,GANM,2CAAH,qDAeb,OANA4B,qBAAU,WACH5B,GACDE,MAEH,IAEEF,EAQD,yBAAKJ,UAAU,IACb,kBAACD,EAAD,MACA,yBAAK0E,GAAG,mCAAmCxE,MAAO,CAACmC,OAAQ,SAA3D,QACA,yBAAKpC,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC+C,EAAD,OAEF,yBAAK/C,UAAU,uBACb,kBAACsD,EAAD,CAAcW,cAAe7D,QAfrC,yBAAKJ,UAAU,kBAAf,gCCjBc0E,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.55891665.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header () {\r\n\r\n    return (\r\n      <nav className=\"navbar fixed-top navbar-dark bg-dark\" style={{\"justify-content\": \"center\"}}>\r\n        <div className=\"container-fluid-nav text-center\">\r\n          <h1 className=\"navbar-dark navbar-brand\">Avance Coronavirus a nivel mundial</h1>\r\n        </div>\r\n      </nav>\r\n    )\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { VegaLite } from 'react-vega';\r\n\r\nexport default function Trend() {\r\n\r\n    const url = \"https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/timeseries?iso2=AR\"\r\n    \r\n    const [data, setData] = useState('');\r\n\r\n    const getData = async () => {\r\n      const response = await fetch(url)\r\n      const dataArray = await response.json()\r\n      const formattedData = []\r\n      const firstItemTimeseries = dataArray[0].timeseries\r\n      const keys = Object.keys(firstItemTimeseries)\r\n      let confirmed = 0, deaths = 0, recovered = 0;\r\n      const firstMarch = new Date(2020, 2, 1)\r\n      keys.map(key => {\r\n        const dateItem = new Date(key)\r\n        if (dateItem >= firstMarch) {\r\n            confirmed = firstItemTimeseries[key].confirmed - confirmed\r\n            formattedData.push({\r\n                date: dateItem,\r\n                type: 'Confirmados',\r\n                quantity: confirmed\r\n            })\r\n            deaths = firstItemTimeseries[key].deaths - deaths\r\n            formattedData.push({\r\n                date: dateItem,\r\n                type: 'Muertes',\r\n                quantity: deaths\r\n            })\r\n            recovered = firstItemTimeseries[key].recovered - recovered\r\n            formattedData.push({\r\n                date: dateItem,\r\n                type: 'Recuperados',\r\n                quantity: recovered\r\n            })\r\n        }\r\n      })\r\n      console.log(formattedData)\r\n      setData({items: formattedData})\r\n    }\r\n  \r\n    useEffect(() => {\r\n      if (!data) {\r\n          getData();\r\n      }\r\n    }, []);\r\n\r\n    const spec = {\r\n        width: 200,\r\n        height: 200,\r\n        mark: {\r\n            type: 'line',\r\n            tooltip: true\r\n        },\r\n        encoding: {\r\n          x: { field: 'date', type: 'temporal', title: 'Fecha' },\r\n          y: { field: 'quantity', type: 'quantitative', title: 'Cantidad'},\r\n          color: {field: 'type', type: 'nominal'}\r\n        },\r\n        data: { name: 'items' },\r\n        actions: false\r\n      }\r\n\r\n    if (!data) {\r\n        return (<div>Buscando datos de Tendencia...</div>);\r\n    }\r\n    return (\r\n        <div>\r\n            <h4>Tendencia en Argentina</h4>\r\n            <VegaLite spec={spec} data={data} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Trend from './Trend';\r\n\r\nexport default function Sidebar () {\r\n    const briefUrl = \"https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/brief\"\r\n    const argBriefUrl = \"https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest?iso2=AR\"\r\n    \r\n    const [data, setData] = useState('');\r\n\r\n    const getData = async () => {\r\n      const responseBrief = await fetch(briefUrl)\r\n      const dataBrief = await responseBrief.json()\r\n      const responseAr = await fetch(argBriefUrl)\r\n      const dataAr = await responseAr.json()      \r\n      console.log(dataAr)\r\n      const response = {\r\n          brief: dataBrief,\r\n          argBrief: dataAr[0]\r\n      }\r\n      setData(response)\r\n    }\r\n  \r\n    useEffect(() => {\r\n      if (!data) {\r\n          getData();\r\n      }\r\n    }, []);\r\n\r\n    if (!data) {\r\n        return (<div>Buscando datos...</div>);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>A nivel mundial</h4>\r\n            <ul>\r\n                <li>Casos recuperados: <span className=\"text-success\">{data.brief.recovered}</span></li>\r\n                <li>Casos confirmados: <span className=\"text-secondary\">{data.brief.confirmed}</span></li>\r\n                <li>Muertes: <span className=\"text-danger\">{data.brief.deaths}</span></li>\r\n            </ul>\r\n            <h4>Argentina</h4>\r\n            <ul>\r\n                <li>Casos recuperados: <span className=\"text-success\">{data.argBrief.recovered}</span></li>\r\n                <li>Casos confirmados: <span className=\"text-secondary\">{data.argBrief.confirmed}</span></li>\r\n                <li>Muertes: <span className=\"text-danger\">{data.argBrief.deaths}</span></li>\r\n            </ul>            \r\n            <Trend />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport { Icon } from \"leaflet\";\r\n\r\nexport default function MapContainer (props) {\r\n    const state = {\r\n        lat: -38.41,\r\n        lng: -63.61,\r\n        zoom: 4,\r\n        }\r\n    if (!props) {\r\n        return (null)\r\n    }\r\n\r\n    return (\r\n        <div className=\"map-frame\">  \r\n            <Map center={state} zoom={state.zoom}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {props.countriesinfo.map(item => (\r\n                <Marker\r\n                    key={item.key}\r\n                    position={[\r\n                        item.location.lat,\r\n                        item.location.lng\r\n                    ]}\r\n                    >\r\n                    <Popup>\r\n                        <div>\r\n                        <p> <strong>{item.key}</strong> </p>\r\n                        <p className=\"text-success\"> recuperados: {item.recovered} </p>\r\n                        <p className=\"text-secondary\"> confirmados: {item.confirmed} </p>\r\n                        <p className=\"text-danger\"> muertes: {item.deaths} </p>\r\n                        </div>\r\n                    </Popup>\r\n                    </Marker>\r\n                ))\r\n            }\r\n            </Map>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './Header';\r\nimport Sidebar from './Sidebar';\r\nimport MapContainer from './MapContainer';\r\n\r\nexport default function App() {\r\n\r\n  const [data, setData] = useState('');\r\n\r\n  const getData = async () => {\r\n    const response = await fetch('https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest?onlyCountries=true')\r\n    const data = await response.json()\r\n    data.map((item) => {\r\n      item.key = item.countryregion;\r\n    })\r\n    setData(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!data) {\r\n        getData();\r\n    }\r\n  }, []);\r\n\r\n  if (!data) {\r\n    return (\r\n      <div className=\"container mt-4\">\r\n        Inicializando componentes...\r\n      </div>\r\n      );\r\n  } else {\r\n    return (\r\n      <div className=\"\">\r\n        <Header />\r\n        <div id=\"fix-for-navbar-fixed-top-spacing\" style={{height: \"42px\"}}>&nbsp;</div>\r\n        <div className=\"container mt-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-4\">\r\n              <Sidebar />\r\n            </div>\r\n            <div className=\"map-container col-8\">\r\n              <MapContainer countriesinfo={data}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}